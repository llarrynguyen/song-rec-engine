The driver program for my application is the "main.py" program. There should not be any 
external dependencies as I have included the PySimpleGui source code which I used to make my gui. Everything is written in python3.8 and it can be easily run through the terminal(which is what I did). If you don't already have python 3.8, it can be downloaded from https://www.python.org/downloads/. I would not recommend running it through Idle because PySimpleGui and Idle both are built with Tkinter and this can cause errors. PyCharm is the IDE that PySimpleGui recommends if one is to be used. Also, please make sure that all of the files have downloaded completely before the main file is run. Also, when running the program, because the first step before loading is to deserialize the large graph and map objects, it may be around 30 seconds before the GUI appears and the program is usable, but after this, everything should be fast.

You use the program by inputting songs into the bottom box one at a time, please make sure the names match exactly. A list of all supported songs is available in the Songs-Artists folder in the listofsongs file and a list of songs by artist is also available in the songsbyartists file. To find all the songs from any given artist, it is also possible to use the top box, although take note that the names must match exactly. Also, all pop up windows must be closed before any-more data can be entered, so please try to close all pop-up windows before you continue using the main program. Enter one song at a time then click input song. When ready to get recommendations, please click the give recommendations button. Once you click the button, your previously entered songs will be lost, so only do it when you are ready to get recommendations.

I got the data from the Million Song Dataset(MSD) which is an open-source dataset from Columbia University. I used three of their datasets. Primarily, the echo nest taste profile subset, which contained over 48 million data points of song/user/playcount triplets. http://millionsongdataset.com/tasteprofile/. I also used song-level tags from an Sql database from last.fm. http://millionsongdataset.com/lastfm/. Lastly, I used the list of all track id's (list of all track Echo Nest Id), available from the main download page. http://millionsongdataset.com/pages/getting-dataset/

The program works by beforehand creating a large bidirectional weighted graph that connects users who have listened to the same songs. Then, when a user enter's their data, they are added as a user in the graph and their connections are formed, then the graph is walked around that user recursively to find all users similar to the true user, and then a list of candidate songs is generated from these similar users. Then content based methods based off of the song-tags are used to downselect to the final 20 songs.

Note, only "main.py" is meant to be run, most of the code was only meant to be run once in order to create the pickles. 